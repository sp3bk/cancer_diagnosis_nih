seednumber <- gsub('2016','',seednumber)
seednumber <- gsub('0','',seednumber)
x <- graphx(x.ad, x2,y2,xbar1, xbar2, ybar1, ybar1p, MaxNumColors,warmcolor, coldcolor, 0.5)
sample <- as.matrix(read.csv("x.csv", sep=","))
sample <- sample[,-c(1)]
#o_help('ind2sub')
#Getting omega & observations
omega <- c()
observations <- c()
for (i in 1:ncol(sample)) {
k <- sample[,i]
for (j in 1:length(k)) {
if (is.na(k[j])) {
omega <- append(j+(i-1)*121,omega)
observations <- append(k[j],observations)
}
}
}
omega <- rev(omega)
observations <- rev(observations)
o_help('')
#cool <- list(nrow(sample),nrow(sample),omega)
#sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', .CallOctave('cell',nrow(sample), nrow(sample), omega), observations, 0.001)
emptycell <- .CallOctave('cell',1,3)
emptycell
emptycell <- .CallOctave('cell',3,3)
emptycell
emptycell <- .CallOctave('cell',2,2)
emptycell
emptycell <- .CallOctave('cell',1,3)
emptycell[1,1] <- nrow(sample)
emptycell(1,1) <- nrow(sample)
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), omega, observations, 0.001)
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), omega, observations, 0.001)
o_help('solver_sNuclearBP')
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), omega, observations, 0.001)
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
o_help('solver_sNuclearBP')
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), omega, observations, 0.001)
typeof(omega)
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), listComega), observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), list(omega), observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
cool <- list(nrow(sample),nrow(sample),omega)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
o_help('solver_sNuclearBP')
cool <- list(list(nrow(sample)),list(nrow(sample)),list(omega))
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
o_help('solver_sNuclearBP')
cool <- list(list(nrow(sample)),list(nrow(sample)),list(omega))
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
cool <- dataframe(cool)
cool <- data.frame(cool)
#cool <- list(list(nrow(sample)),list(nrow(sample)),list(omega))
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
cool <- data.frame(nrow(sample,nrow(sample),omega))
cool <- data.frame(nrow(sample),nrow(sample),omega)
#cool <- list(list(nrow(sample)),list(nrow(sample)),list(omega))
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
cool
cool <- as.matrix(nrow(sample),nrow(sample),omega)
cool
cool <- as.matrix(list(nrow(sample),nrow(sample),omega))
cool
cool <- matrix(list(nrow(sample),nrow(sample),omega))
cool
omega
cool <- c(nrow(sample),nrow(sample),omega)
cool <- matrix(cool,nrow=1,ncol=3)
cool <- c(nrow(sample),nrow(sample),omega)
cool <- matrix(cool,nrow=1,ncol=3)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=3)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=2)
cool <- matrix(cool,nrow=1,ncol=3, bycol=FALSE)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=3, bycol=FALSE)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=3, bycol=TRUE)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=3, byrow=TRUE)
cool <- c(nrow(sample),nrow(sample))#,omega)
cool <- matrix(cool,nrow=1,ncol=3, byrow=FALSE)
omega
list(omega) <- omega
omega <- list(omega)
omega
cool <- c(nrow(sample),nrow(sample),omega)
cool <- matrix(cool,nrow=1,ncol=3)
cool
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
cool <- data.frame(nrow(sample),nrow(sample),omega)
#omega <- list(omega)
#omega
#cool <- c(nrow(sample),nrow(sample),omega)
#cool <- matrix(cool,nrow=1,ncol=3)
#cool
#cool <- list(list(nrow(sample)),list(nrow(sample)),list(omega))
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
cool <- data.frame(nrow(sample),nrow(sample),omega)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
#sNuclearBP <- .CallOctave('solver_sNuclearBP', nrow(sample), nrow(sample), (omega), observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', cool, observations, 0.001)
#In the midst of Octave implementation process?
library(rPython)
library(softImpute)
library(NMF)
library(ggplot2)
library(RcppOctave)
###########FUNCTIONS#############
#1. Generating and drawing random matrix
graphx <- function(ad, x2s,y2s,xbar1s, xbar2s,ybar1s, ybar1ps, MaxNumColorss,warmcolors, coldcolors, randchances) {
x <- ifelse(ad==0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=FALSE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#38424E", frame.plot=TRUE) #38424E C0D8D8 F6F6F6 A9B0B3
par(fig=c(0,x2s,0,y2s), new=TRUE)
grid(nx = ncol(ad), ny = nrow(ad), col ="black", lty = "solid", lwd = par("lwd"), equilogs = TRUE) #rgb(red=244/256, green=244/256, blue=244/256, alpha=0.2)
par(fig=c(0,x2s,0,y2s), new=TRUE)
x <- ifelse(ad>0, ad, NA)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=warmcolors, font.main = 4)#, main="X = Axon Matrix . Dendrites Matrix = Connection Matrix"
x <- ifelse(ad<0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=coldcolors)
rand <- matrix(runif(n=length(ad), min=0 , max=1),ncol=ncol(ad))
x <-ifelse(ad!=0 & rand>randchances, ad, NA) #
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#FAF0FE")#FF6666 FAF0FE BD99E1 F4F7F7 E3F6F3 C4EDE4
x <-ifelse(ad!=0 & rand>randchances, NA, ad) #
write.csv(x,"x.csv")
par(fig=c(xbar1s,xbar2s,ybar1s,y2s),new=TRUE)
y <- seq(min(ad[ad>0]),max(ad),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=warmcolors[2:MaxNumColorss])
par(fig=c(xbar1s,xbar2s,0,ybar1ps),new=TRUE)
y <- seq(min(ad),max(ad[ad<0]),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=coldcolors[2:MaxNumColorss])
x <- x[-(c(1)),]
return (x)
}
#2. Drawing solved data
graph <- function(ad, file, x2s,y2s,xbar1s, xbar2s, ybar1s, ybar1ps, MaxNumColorss,warmcolors, coldcolors) {
xs <- as.matrix(read.csv(file, sep=","))
xs <- xs[,-c(1)]
x <- xs
x <- ifelse(ad==0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=FALSE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#38424E", frame.plot=TRUE) #38424E C0D8D8 F6F6F6
par(fig=c(0,x2s,0,y2s), new=TRUE)
grid(nx = ncol(ad), ny = nrow(ad), col ="black", lty = "solid", lwd = par("lwd"), equilogs = TRUE) #rgb(red=244/256, green=244/256, blue=244/256, alpha=0.2)
par(fig=c(0,x2s,0,y2s), new=TRUE)
x <- ifelse(xs>0 & ad!=0, xs, NA)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=warmcolors, font.main = 4)#, main="X = Axon Matrix . Dendrites Matrix = Connection Matrix"
x <-ifelse(xs<0 & ad!=0, xs, NA)
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=coldcolors)
par(fig=c(xbar1s,xbar2s,ybar1s,y2s),new=TRUE)
y <- seq(min(ad[ad>0]),max(ad),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=warmcolors[2:MaxNumColorss])
par(fig=c(xbar1s,xbar2s,0,ybar1ps),new=TRUE)
y <- seq(min(ad),max(ad[ad<0]),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=coldcolors[2:MaxNumColorss])
xs <-xs[-c(1),]
return (xs)
}
#3. SVD of softimpute
softimpute <- function(number) {
set.seed(number)
bob <- as.matrix(read.csv("x.csv", sep=","))
bob <- bob[,-c(1)]
fits=softImpute(bob,trace=TRUE,type="svd")
fita=softImpute(bob,trace=TRUE)
fits2=softImpute(bob,rank.max=100,lambda=10,trace=TRUE,type="svd")
fita2=softImpute(bob,rank.max=100,lambda=10,trace=TRUE)
fits2$d
write.csv(complete(bob,fits2),"x2.csv")
}
#4. ALS of softimpute
#softimpute2 <- function(number) {
#set.seed(number)
#bob <- as.matrix(read.csv("x.csv", sep=","))
#bob <- bob[,-c(1)]
#fits=softImpute(bob,trace=TRUE,type="als")
#fita=softImpute(bob,trace=TRUE)
#fits2=softImpute(bob,rank.max=3,lambda=1.9,trace=TRUE,type="als")
#fita2=softImpute(bob,rank.max=3,lambda=1.9,trace=TRUE)
#fits2$d
#completion <- complete(bob,fits2)
#write.csv(completion,"x3.csv")
#}
#5. Generating successrate/ Note: xna = surrogate; xa = original; x = testing
successrate <- function(xna, xa, x){
sd_pos <- sd(xa[xa>0],na.rm=TRUE)
sd_neg <- sd(xa[xa<0],na.rm=TRUE)
poscount <- ifelse(((xa[is.na(xna) & xa>0] - sd_pos) < x[is.na(xna) & xa>0]) & (x[is.na(xna) & a>0] < (xa[is.na(xna) & xa>0] + sd_pos)), 1, 0)
negcount <- ifelse( ((xa[is.na(xna) & xa<0] - sd_neg) < x[is.na(xna) & xa<0]) & (x[is.na(xna) & a<0] < (xa[is.na(xna) & xa<0] + sd_neg)), 1, 0)
return (round (100*(sum(poscount) + sum(negcount))/sum(is.na(xna)),2))
}
######################################################################################################################
######################################################################################################################
######################################################################################################################
################       MAIN         #################
pdf(file = "myplot.pdf")
axons     <-   as.matrix(read.csv("Axons.csv", sep=","))
dendrites <- t(as.matrix(read.csv("Dendrites.csv", sep=","))) #tranpose to change row and col
x.conNum  <- axons %*% dendrites
write.csv(x.conNum,"xconnum.csv")
axons[axons>0] <- runif(n=length(axons[axons>0]), min= 2.3, max= 5)
axons[axons<0] <- runif(n=length(axons[axons<0]), min=-2/3, max=-0.25)
dendrites[dendrites>0] <- runif(n=length(dendrites[dendrites>0]), min=2 , max=3)
x.ad <- axons %*% dendrites #dot product
write.csv(x.ad,"xad.csv")
#Initializing values
x2=0.85
y2=0.85
xbar1=0.68
xbar2=0.88
ybar1=0.294
ybar1p=0.556
MaxNumColors <- 2048
warmcolor=colorRampPalette(c("#D53D0C", "yellow"))(MaxNumColors)
coldcolor=colorRampPalette(c("#C6CAD3","#096F9F"))(MaxNumColors)
################Creating Original matrix################
a=graph(x.ad, "xad.csv", x2, y2,xbar1,xbar2,ybar1,ybar1p,MaxNumColors,warmcolor, coldcolor)
###############Creating SVD seednumber#################
seednumber <- Sys.time()
seednumber <- gsub(':','',seednumber)
seednumber <- gsub('-','',seednumber)
seednumber <- gsub(' ','',seednumber)
seednumber <- gsub('2016','',seednumber)
seednumber <- gsub('0','',seednumber)
x <- graphx(x.ad, x2,y2,xbar1, xbar2, ybar1, ybar1p, MaxNumColors,warmcolor, coldcolor, 0.5)
sample <- as.matrix(read.csv("x.csv", sep=","))
sample <- sample[,-c(1)]
#o_help('ind2sub')
#Getting omega & observations
omega <- c()
observations <- c()
for (i in 1:ncol(sample)) {
k <- sample[,i]
for (j in 1:length(k)) {
if (is.na(k[j])) {
omega <- append(j+(i-1)*121,omega)
observations <- append(k[j],observations)
}
}
}
omega <- rev(omega)
observations <- rev(observations)
sNuclearBP <- .CallOctave('solver_sNuclearBP', omega, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', omega, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', list(omega), observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', omega, observations, 0.001)
sNuclearBP <- .CallOctave('solver_sNuclearBP', omega, observations, 0.001)
o_help('CVXR')
o_help('runner')
o_help('runner')
o_help('runner')
o_help('CVXR')
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
setwd("~/Desktop/GMUintern/MatrixCompletion/MATLAB/TFCOS copy")
#In the midst of Octave implementation process?
library(rPython)
library(softImpute)
library(NMF)
library(ggplot2)
library(RcppOctave)
###########FUNCTIONS#############
#1. Generating and drawing random matrix
graphx <- function(ad, x2s,y2s,xbar1s, xbar2s,ybar1s, ybar1ps, MaxNumColorss,warmcolors, coldcolors, randchances) {
x <- ifelse(ad==0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=FALSE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#38424E", frame.plot=TRUE) #38424E C0D8D8 F6F6F6 A9B0B3
par(fig=c(0,x2s,0,y2s), new=TRUE)
grid(nx = ncol(ad), ny = nrow(ad), col ="black", lty = "solid", lwd = par("lwd"), equilogs = TRUE) #rgb(red=244/256, green=244/256, blue=244/256, alpha=0.2)
par(fig=c(0,x2s,0,y2s), new=TRUE)
x <- ifelse(ad>0, ad, NA)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=warmcolors, font.main = 4)#, main="X = Axon Matrix . Dendrites Matrix = Connection Matrix"
x <- ifelse(ad<0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=coldcolors)
rand <- matrix(runif(n=length(ad), min=0 , max=1),ncol=ncol(ad))
x <-ifelse(ad!=0 & rand>randchances, ad, NA) #
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#FAF0FE")#FF6666 FAF0FE BD99E1 F4F7F7 E3F6F3 C4EDE4
x <-ifelse(ad!=0 & rand>randchances, NA, ad) #
write.csv(x,"x.csv")
par(fig=c(xbar1s,xbar2s,ybar1s,y2s),new=TRUE)
y <- seq(min(ad[ad>0]),max(ad),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=warmcolors[2:MaxNumColorss])
par(fig=c(xbar1s,xbar2s,0,ybar1ps),new=TRUE)
y <- seq(min(ad),max(ad[ad<0]),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=coldcolors[2:MaxNumColorss])
x <- x[-(c(1)),]
return (x)
}
#2. Drawing solved data
graph <- function(ad, file, x2s,y2s,xbar1s, xbar2s, ybar1s, ybar1ps, MaxNumColorss,warmcolors, coldcolors) {
xs <- as.matrix(read.csv(file, sep=","))
xs <- xs[,-c(1)]
x <- xs
x <- ifelse(ad==0, ad, NA)
par(fig=c(0,x2s,0,y2s), new=FALSE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col="#38424E", frame.plot=TRUE) #38424E C0D8D8 F6F6F6
par(fig=c(0,x2s,0,y2s), new=TRUE)
grid(nx = ncol(ad), ny = nrow(ad), col ="black", lty = "solid", lwd = par("lwd"), equilogs = TRUE) #rgb(red=244/256, green=244/256, blue=244/256, alpha=0.2)
par(fig=c(0,x2s,0,y2s), new=TRUE)
x <- ifelse(xs>0 & ad!=0, xs, NA)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=warmcolors, font.main = 4)#, main="X = Axon Matrix . Dendrites Matrix = Connection Matrix"
x <-ifelse(xs<0 & ad!=0, xs, NA)
par(fig=c(0,x2s,0,y2s), new=TRUE)
image(x=t(x[nrow(x):1,]), axes=FALSE, zlim=c(min(x,na.rm=T),max(x,na.rm=T)), col=coldcolors)
par(fig=c(xbar1s,xbar2s,ybar1s,y2s),new=TRUE)
y <- seq(min(ad[ad>0]),max(ad),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=warmcolors[2:MaxNumColorss])
par(fig=c(xbar1s,xbar2s,0,ybar1ps),new=TRUE)
y <- seq(min(ad),max(ad[ad<0]),length.out=MaxNumColorss)
image(y=y,z=t(2:MaxNumColorss), axes=FALSE, frame.plot=TRUE, ann=FALSE, col=coldcolors[2:MaxNumColorss])
xs <-xs[-c(1),]
return (xs)
}
#3. SVD of softimpute
softimpute <- function(number) {
set.seed(number)
bob <- as.matrix(read.csv("x.csv", sep=","))
bob <- bob[,-c(1)]
fits=softImpute(bob,trace=TRUE,type="svd")
fita=softImpute(bob,trace=TRUE)
fits2=softImpute(bob,rank.max=100,lambda=10,trace=TRUE,type="svd")
fita2=softImpute(bob,rank.max=100,lambda=10,trace=TRUE)
fits2$d
write.csv(complete(bob,fits2),"x2.csv")
}
#4. ALS of softimpute
#softimpute2 <- function(number) {
#set.seed(number)
#bob <- as.matrix(read.csv("x.csv", sep=","))
#bob <- bob[,-c(1)]
#fits=softImpute(bob,trace=TRUE,type="als")
#fita=softImpute(bob,trace=TRUE)
#fits2=softImpute(bob,rank.max=3,lambda=1.9,trace=TRUE,type="als")
#fita2=softImpute(bob,rank.max=3,lambda=1.9,trace=TRUE)
#fits2$d
#completion <- complete(bob,fits2)
#write.csv(completion,"x3.csv")
#}
#5. Generating successrate/ Note: xna = surrogate; xa = original; x = testing
successrate <- function(xna, xa, x){
sd_pos <- sd(xa[xa>0],na.rm=TRUE)
sd_neg <- sd(xa[xa<0],na.rm=TRUE)
poscount <- ifelse(((xa[is.na(xna) & xa>0] - sd_pos) < x[is.na(xna) & xa>0]) & (x[is.na(xna) & a>0] < (xa[is.na(xna) & xa>0] + sd_pos)), 1, 0)
negcount <- ifelse( ((xa[is.na(xna) & xa<0] - sd_neg) < x[is.na(xna) & xa<0]) & (x[is.na(xna) & a<0] < (xa[is.na(xna) & xa<0] + sd_neg)), 1, 0)
return (round (100*(sum(poscount) + sum(negcount))/sum(is.na(xna)),2))
}
######################################################################################################################
######################################################################################################################
######################################################################################################################
################       MAIN         #################
pdf(file = "myplot.pdf")
axons     <-   as.matrix(read.csv("Axons.csv", sep=","))
dendrites <- t(as.matrix(read.csv("Dendrites.csv", sep=","))) #tranpose to change row and col
x.conNum  <- axons %*% dendrites
write.csv(x.conNum,"xconnum.csv")
axons[axons>0] <- runif(n=length(axons[axons>0]), min= 2.3, max= 5)
axons[axons<0] <- runif(n=length(axons[axons<0]), min=-2/3, max=-0.25)
dendrites[dendrites>0] <- runif(n=length(dendrites[dendrites>0]), min=2 , max=3)
x.ad <- axons %*% dendrites #dot product
write.csv(x.ad,"xad.csv")
#Initializing values
x2=0.85
y2=0.85
xbar1=0.68
xbar2=0.88
ybar1=0.294
ybar1p=0.556
MaxNumColors <- 2048
warmcolor=colorRampPalette(c("#D53D0C", "yellow"))(MaxNumColors)
coldcolor=colorRampPalette(c("#C6CAD3","#096F9F"))(MaxNumColors)
################Creating Original matrix################
a=graph(x.ad, "xad.csv", x2, y2,xbar1,xbar2,ybar1,ybar1p,MaxNumColors,warmcolor, coldcolor)
###############Creating SVD seednumber#################
seednumber <- Sys.time()
seednumber <- gsub(':','',seednumber)
seednumber <- gsub('-','',seednumber)
seednumber <- gsub(' ','',seednumber)
seednumber <- gsub('2016','',seednumber)
seednumber <- gsub('0','',seednumber)
x <- graphx(x.ad, x2,y2,xbar1, xbar2, ybar1, ybar1p, MaxNumColors,warmcolor, coldcolor, 0.5)
sample <- as.matrix(read.csv("x.csv", sep=","))
sample <- sample[,-c(1)]
#Getting omega & observations
omega <- c()
observations <- c()
for (i in 1:ncol(sample)) {
k <- sample[,i]
for (j in 1:length(k)) {
if (is.na(k[j])) {
omega <- append(j+(i-1)*121,omega)
observations <- append(k[j],observations)
}
}
}
omega <- rev(omega)
observations <- rev(observations)
o_help('CVXR')
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
o_help('feval')
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
.CallOctave('CVXR',omega, observations)
setwd("~/")
generate_matrix <- function(x){
indptr  = x$sample$matrix$indptr+1
indices = x$sample$matrix$indices+1
data    = x$sample$matrix$data
nr = length(x$observation$ids)
counts = sapply(2:length(indptr),function(i){
x = rep(0,nr)
seq = indptr[i-1]:(indptr[i]-1)
x[indices[seq]] = data[seq]
x
})
rownames(counts) = x$observation$ids
colnames(counts) = x$sample$ids
# I wish this next line wasn't necessary
lapply(1:nrow(counts),function(i){
counts[i,]
})
}
generate_metadata <- function(x){
metadata = x$metadata
metadata = lapply(1:length(x$ids),function(i){
id_metadata = lapply(metadata,function(j){
if(length(dim(j))>1){ as.vector(j[,i,drop=FALSE]) }
else{ j[i] }
})
list(id = x$ids[i],metadata=id_metadata)
})
return(metadata)
}
namedList <- function(...) {
L <- list(...)
snm <- sapply(substitute(list(...)),deparse)[-1]
if (is.null(nm <- names(L))) nm <- snm
if (any(nonames <- nm=="")) nm[nonames] <- snm[nonames]
setNames(L,nm)
}
read_hdf5_biom<-function(file_input){
library(rhdf5)
library(biom)
x = h5read(file_input,"/",read.attributes = TRUE)
data = generate_matrix(x)
rows = generate_metadata(x$observation)
columns = generate_metadata(x$sample)
shape = c(length(data),length(data[[1]])) # dim(data)
# Experimental -- need to actually load these from file
id = attr(x,"id")
vs = attr(x,"format-version")
format = sprintf("Biological Observation Matrix %s.%s",vs[1],vs[2])
format_url = attr(x,"format-url")
type = "OTU table"
#type=attr(x,"type")
generated_by = attr(x,"generated-by")
date = attr(x,"creation-date")
matrix_type = "dense"
matrix_element_type = "int"
namedList(id,format,format_url,type,generated_by,date,matrix_type,matrix_element_type,
rows,columns,shape,data)
}
View(draw.roc)
View(draw.roc)
View(generate_matrix)
View(read_hdf5_biom)
